# References:
# https://github.com/awslabs/ecs-nginx-reverse-proxy
# https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights-Prometheus-Setup-nginx-ecs.html
events {
  worker_connections 768;
}

http {
  # Nginx will handle gzip compression of responses from the app server
  gzip on;
  gzip_proxied any;
  gzip_types text/plain application/json;
  gzip_min_length 1000;

  server {
    listen <NGINX-PORT>;

    # Nginx will reject anything not matching /app
    location <APP-PATH> {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      # To avoid Nginx caching the IP addresses of the backend use resolver and variables
      # This configuration has been disabled on purpose to simulate a misconfiguration
      # preventing the application from being accessed when the Fargate containers in the upstream
      # task have been replaced :
      # resolver 169.254.169.253;
      # set $upstream_endpoint "http://<APP-NAME>.<APP-NAMESPACE>:<APP-PORT>";
      # proxy_pass $upstream_endpoint$request_uri;
      proxy_pass http://<APP-NAME>.<APP-NAMESPACE>:<APP-PORT>;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
      proxy_connect_timeout 3s;
      proxy_read_timeout 3s;
    }

    location <NGINX-HEALTH-CHECK-PATH> {
      access_log off;
      return 200 'OK!';
      add_header Content-Type text/plain;
    }
  }
}